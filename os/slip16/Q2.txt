#include <iostream>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <mpi.h>
#include <limits> 

int main(int argc, char** argv) {
  MPI_Init(&argc, &argv);

  int rank, size;
  MPI_Comm_rank(MPI_COMM_WORLD, &rank);
  MPI_Comm_size(MPI_COMM_WORLD, &size);

  const int totalNumbers = 1000;
  std::vector<int> numbers;

  if (rank == 0) {
    std::srand(std::time(0));
    numbers.resize(totalNumbers);
    for (int i = 0; i < totalNumbers; ++i) {
      numbers[i] = std::rand() % 10000;
    }
  }
  int numElements = totalNumbers;
  MPI_Bcast(&numElements, 1, MPI_INT, 0, MPI_COMM_WORLD);
  if (rank != 0) {
    numbers.resize(numElements);
  }
  MPI_Bcast(numbers.data(), numElements, MPI_INT, 0, MPI_COMM_WORLD);
  int localMin = std::numeric_limits<int>::max(); 
  int localStart = rank * (totalNumbers / size);
  int localEnd = (rank + 1) * (totalNumbers / size);
  if (rank == size - 1) {
    localEnd = totalNumbers; 
  }

  for (int i = localStart; i < localEnd; ++i) {
    if (numbers[i] < localMin) {
      localMin = numbers[i];
    }
  }
  int globalMin = 0;
  MPI_Reduce(&localMin, &globalMin, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);
  if (rank == 0) {
    std::cout << "Global Min: " << globalMin << std::endl;
  }

  MPI_Finalize();
  return 0;
}