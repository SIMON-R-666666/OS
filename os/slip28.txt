Q1
#include <stdio.h>
#include <stdlib.h>
void sort(int arr[], int n) 
{
    int temp;
    for (int i = 0; i < n - 1; i++) 
    {
        for (int j = 0; j < n - i - 1; j++) 
        {
            if (arr[j] > arr[j + 1]) 
            {
                temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}
void c_look(int requests[], int n, int head) 
{
    int total_movement = 0;
    int current = head;
    sort(requests, n);
    int index;
    for (index = 0; index < n; index++) 
    {
        if (requests[index] > head) 
        {
            break;
        }
    }
    printf("Order of servicing requests using C-LOOK: ");
    for (int i = index; i < n; i++) 
    {
        printf("%d ", requests[i]);
        total_movement += abs(current - requests[i]);
        current = requests[i];
    }
    for (int i = 0; i < index; i++) 
    {
        printf("%d ", requests[i]);
        total_movement += abs(current - requests[i]);
        current = requests[i];
    }
    printf("\nTotal head movement using C-LOOK: %d\n", total_movement);
}
int main() 
{
    int n, head, disk_size;
    printf("Enter total number of disk blocks: ");
    scanf("%d", &disk_size);
    printf("Enter number of requests: ");
    scanf("%d", &n);
    int requests[n];
    printf("Enter the request string: ");
    for (int i = 0; i < n; i++) 
    {
        scanf("%d", &requests[i]);
    }
    printf("Enter starting head position: ");
    scanf("%d", &head);
    c_look(requests, n, head);
    return 0;
}

Q2
#include <stdio.h>
 #include <stdlib.h>
 #include <mpi.h>
 int main(int argc, char *argv[]) 
 {
    int rank, size, n = 1000;
    int numbers[n], local_sum = 0, global_sum = 0;
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    if (rank == 0) {
        for (int i = 0; i < n; i++) 
        {
            numbers[i] = rand() % 1000;
        }
    }
    MPI_Bcast(numbers, n, MPI_INT, 0, MPI_COMM_WORLD);
    for (int i = rank; i < n; i += size) 
    {
        if (numbers[i] % 2 != 0) 
        {
            local_sum += numbers[i];
        }
    }
    MPI_Reduce(&local_sum, &global_sum, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);
    if (rank == 0) 
    {
        printf("Sum of all odd numbers: %d\n", global_sum);
    }
    MPI_Finalize();
    return 0;
 }

