Q1
#include <stdio.h>
#include <stdbool.h>
#define P 5
#define R 4
void calculateNeed(int need[P][R], int max[P][R], int allocation[P][R]) 
{
for (int i = 0; i < P; i++) 
{
for (int j = 0; j < R; j++) 
{
need[i][j] = max[i][j] - allocation[i][j];
}
}
}
bool isSafe(int available[], int max[][R], int allocation[][R], int need[][R]) 
{
int work[R];
bool finish[P] = {false};
for (int i = 0; i < R; i++) 
{
work[i] = available[i];
}
while (true) 
{
bool found = false;
for (int i = 0; i < P; i++) 
{
if (!finish[i]) 
{
bool canAllocate = true;
for (int j = 0; j < R; j++) 
{
if (need[i][j] > work[j]) 
{
canAllocate = false;
break;
}
}
if (canAllocate) 
{
for (int j = 0; j < R; j++) 
{
work[j] += allocation[i][j];
}
finish[i] = true;
found = true;
break;
}
}
}
if (!found) 
{
break;
}
}
for (int i = 0; i < P; i++) 
{
if (!finish[i]) 
{
return false;
}
}
return true;
}
int main() 
{
int allocation[P][R] = {
{0, 0, 1, 2},
{1, 0, 0, 0},
{1, 3, 5, 4},
{0, 6, 3, 2},
{0, 0, 1, 4}
};
int max[P][R] = {
{0, 0, 1, 2},
{1, 7, 5, 0},
{2, 3, 5, 6},
{0, 6, 5, 2},
{0, 6, 5, 6}
};
int available[R] = {1, 5, 2, 0};
int need[P][R];
calculateNeed(need, max, allocation);
if (isSafe(available, max, allocation, need)) 
{
printf("The system is in a safe state.\n");
} 
else 
{
printf("The system is not in a safe state.\n");
}
return 0;
}


Q2
#include <stdio.h>
#include <stdlib.h>
void sort(int arr[], int n) 
{
    int temp;
    for (int i = 0; i < n - 1; i++) 
    {
        for (int j = 0; j < n - i - 1; j++) 
        {
            if (arr[j] > arr[j + 1]) 
            {
                temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}
void look(int requests[], int n, int head, int direction) 
{
    int total_movement = 0;
    int current = head;
    sort(requests, n);
    int index;
    for (index = 0; index < n; index++) 
    {
        if (requests[index] > head) 
        {
            break;
        }
    }
    printf("Order of servicing requests using LOOK: ");
    if (direction == 0) 
    {
        for (int i = index - 1; i >= 0; i--) 
        {
            printf("%d ", requests[i]);
            total_movement += abs(current - requests[i]);
            current = requests[i];
        }
        for (int i = index; i < n; i++) 
        {
            printf("%d ", requests[i]);
            total_movement += abs(current - requests[i]);
            current = requests[i];
        }
    } 
    else 
    { 
        for (int i = index; i < n; i++) 
        {
            printf("%d ", requests[i]);
            total_movement += abs(current - requests[i]);
            current = requests[i];
        }
        for (int i = index - 1; i >= 0; i--) 
        {
            printf("%d ", requests[i]);
            total_movement += abs(current - requests[i]);
            current = requests[i];
        }
    }
    printf("\nTotal head movement using LOOK: %d\n", total_movement);
}
int main() 
{
    int n, head, direction, disk_size;
    printf("Enter total number of disk blocks: ");
    scanf("%d", &disk_size);
    printf("Enter number of requests: ");
    scanf("%d", &n);
    int requests[n];
    printf("Enter the request string: ");
    for (int i = 0; i < n; i++) 
    {
        scanf("%d", &requests[i]);
    }
    printf("Enter starting head position: ");
    scanf("%d", &head);
    printf("Enter direction (0 for Left, 1 for Right): ");
    scanf("%d", &direction);
    look(requests, n, head, direction);
    return 0;
}
