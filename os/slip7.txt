Q1
#include <stdio.h>
#include <stdbool.h>
#define P 5
#define R 4
void calculateNeed(int need[P][R], int max[P][R], int allocation[P][R]) 
{
for (int i = 0; i < P; i++) 
{
for (int j = 0; j < R; j++) 
{
need[i][j] = max[i][j] - allocation[i][j];
}
}
}
bool isSafe(int available[], int max[][R], int allocation[][R], int need[][R]) 
{
int work[R];
bool finish[P] = {false};
for (int i = 0; i < R; i++) 
{
work[i] = available[i];
}
while (true) 
{
bool found = false;
for (int i = 0; i < P; i++) 
{
if (!finish[i]) 
{
bool canAllocate = true;
for (int j = 0; j < R; j++) 
{
if (need[i][j] > work[j]) 
{
canAllocate = false;
break;
}
}
if (canAllocate) 
{
for (int j = 0; j < R; j++) 
{
work[j] += allocation[i][j];
}
finish[i] = true;
found = true;
break;
}
}
}
if (!found) 
{
break;
}
}
for (int i = 0; i < P; i++) 
{
if (!finish[i]) 
{
return false;
}
}
return true;
}
int main() 
{
int allocation[P][R] = {
{2, 0, 0, 1},
{3, 1, 2, 1},
{2, 1, 0, 3},
{1, 3, 1, 2},
{1, 4, 3, 2}
};
int max[P][R] = {
{4, 2, 1, 2},
{5, 2, 5, 2},
{2, 3, 1, 6},
{1, 4, 2, 4},
{3, 6, 6, 5}
};
int available[R] = {3, 3, 2, 1};
int need[P][R];
calculateNeed(need, max, allocation);
if (isSafe(available, max, allocation, need)) 
{
printf("The system is in a safe state.\n");
} 
else 
{
printf("The system is not in a safe state.\n");
}
return 0;
}



Q2
#include <stdio.h>
#include <stdlib.h>
void sortRequests(int requests[], int n) 
{
int temp;
for (int i = 0; i < n - 1; i++) 
{
for (int j = i + 1; j < n; j++) 
{
if (requests[i] > requests[j]) 
{
temp = requests[i];
requests[i] = requests[j];
requests[j] = temp;
}
}
}
}
void scan(int requests[], int n, int head, int diskSize, char direction) 
{
int totalHeadMovements = 0;
int left[100], right[100];
int leftCount = 0, rightCount = 0;
for (int i = 0; i < n; i++) 
{
if (requests[i] < head) 
{
left[leftCount++] = requests[i];
} 
else 
{
right[rightCount++] = requests[i];
}
}
sortRequests(left, leftCount);
sortRequests(right, rightCount);
if (direction == 'R') 
{
totalHeadMovements += (diskSize - 1 - head);
for (int i = 0; i < rightCount; i++) 
{
totalHeadMovements += abs(head - right[i]);
head = right[i];
}
totalHeadMovements += (head - 0);
head = 0;
for (int i = leftCount - 1; i >= 0; i--) 
{
totalHeadMovements += abs(head - left[i]);
head = left[i];
}
}
printf("Requests in the order they are served:");
for (int i = 0; i < rightCount; i++) 
{
printf("%d ", right[i]);
}
for (int i = leftCount - 1; i >= 0; i--) 
{
printf("%d ", left[i]);
}
printf("Total head movements: %d", totalHeadMovements);
}
int main() 
{
int requests[] = {82, 170, 43, 140, 24, 16, 190};
int n = sizeof(requests) / sizeof(requests[0]);
int head, diskSize = 200;
char direction;
printf("Enter the starting head position: ");
scanf("%d", &head);
printf("Enter the direction (R for Right, L for Left): ");
scanf(" %c", &direction);
scan(requests, n, head, diskSize, direction);
return 0;
}