Q1
#include <stdio.h>
 #include <stdlib.h>
 #include <mpi.h>
 int main(int argc, char *argv[]) 
 {
    int rank, size, n = 1000;
    int numbers[n], local_sum = 0, global_sum = 0;
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    if (rank == 0) {
        for (int i = 0; i < n; i++) 
        {
            numbers[i] = rand() % 1000;
        }
    }
    MPI_Bcast(numbers, n, MPI_INT, 0, MPI_COMM_WORLD);
    for (int i = rank; i < n; i += size) 
    {
        if (numbers[i] % 2 != 0) 
        {
            local_sum += numbers[i];
        }
    }
    MPI_Reduce(&local_sum, &global_sum, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);
    if (rank == 0) 
    {
        printf("Sum of all odd numbers: %d\n", global_sum);
    }
    MPI_Finalize();
    return 0;
 }

Q2
#include <stdio.h>
#define PROCESS_COUNT 5
#define RESOURCE_COUNT 4
int allocation[PROCESS_COUNT][RESOURCE_COUNT] = {
{0, 1, 0},
{2, 0, 0},
{3, 0, 3},
{2, 1, 1},
{0, 0, 2}
};
int max[PROCESS_COUNT][RESOURCE_COUNT] = {
{0, 0, 0},
{2, 0, 2},
{0, 0, 0},
{1, 0, 0},
{0, 0, 2}
};
int available[RESOURCE_COUNT] = {0, 0, 0};
int need[PROCESS_COUNT][RESOURCE_COUNT];
void calculateNeedMatrix() 
{
for (int i = 0; i < PROCESS_COUNT; i++) 
{
for (int j = 0; j < RESOURCE_COUNT; j++) 
{
need[i][j] = max[i][j] - allocation[i][j];
}
}
}
int isSafeState() 
{
int work[RESOURCE_COUNT];
int finish[PROCESS_COUNT] = {0};
int safeSequence[PROCESS_COUNT];
int count = 0;
for (int i = 0; i < RESOURCE_COUNT; i++) 
{
work[i] = available[i];
}
while (count < PROCESS_COUNT) 
{
int found = 0;
for (int i = 0; i < PROCESS_COUNT; i++) 
{
if (finish[i] == 0) 
{
int j;
for (j = 0; j < RESOURCE_COUNT; j++) 
{
if (need[i][j] > work[j])
break;
}
if (j == RESOURCE_COUNT) 
{
for (int k = 0; k < RESOURCE_COUNT; k++) 
{
work[k] += allocation[i][k];
}
safeSequence[count++] = i;
finish[i] = 1;
found = 1;
}
}
}
if (!found) 
{
printf("System is not in a safe state.\n");
return 0;
}
}
printf("System is in a safe state.\nSafe sequence is: ");
for (int i = 0; i < PROCESS_COUNT; i++) 
{
printf("P%d ", safeSequence[i]);
}
printf("\n");
return 1;
}
int main() 
{
calculateNeedMatrix();
printf("Need Matrix:\n");
for (int i = 0; i < PROCESS_COUNT; i++) 
{
for (int j = 0; j < RESOURCE_COUNT; j++) 
{
printf("%d ", need[i][j]);
}
printf("\n");
}
isSafeState();
return 0;
}


