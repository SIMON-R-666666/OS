#include <stdio.h>
#include <stdlib.h>

#define PROCESSES 5
#define RESOURCES 3

int allocation[PROCESSES][RESOURCES] = {
    {2, 3, 2},
    {4, 0, 0},
    {5, 0, 4},
    {4, 3, 3},
    {2, 2, 4}
};

int max[PROCESSES][RESOURCES] = {
    {9, 7, 5},
    {5, 2, 2},
    {1, 0, 4},
    {4, 4, 4},
    {6, 5, 5}
};

int available[RESOURCES] = {3, 3, 2};
int need[PROCESSES][RESOURCES];

void calculateNeed() {
    for (int i = 0; i < PROCESSES; i++) {
        for (int j = 0; j < RESOURCES; j++) {
            need[i][j] = max[i][j] - allocation[i][j];
        }
    }
}

void acceptAvailable() {
    printf("Enter available resources (A B C): ");
    for (int i = 0; i < RESOURCES; i++) {
        scanf("%d", &available[i]);
    }
}

void displayAllocationMax() {
    printf("\nProcess\tAllocation\tMax\n");
    printf("\tA B C\t\tA B C\n");

    for (int i = 0; i < PROCESSES; i++) {
        printf("P%d\t", i);
        for (int j = 0; j < RESOURCES; j++) {
            printf("%d ", allocation[i][j]);
        }
        printf("\t\t");
        for (int j = 0; j < RESOURCES; j++) {
            printf("%d ", max[i][j]);
        }
        printf("\n");
    }
}

void displayNeed() {
    calculateNeed();
    printf("\nNeed Matrix:\n");
    printf("\tA B C\n");

    for (int i = 0; i < PROCESSES; i++) {
        printf("P%d\t", i);
        for (int j = 0; j < RESOURCES; j++) {
            printf("%d ", need[i][j]);
        }
        printf("\n");
    }
}

void displayAvailable() {
    printf("\nAvailable Resources: ");
    for (int i = 0; i < RESOURCES; i++) {
        printf("%d ", available[i]);
    }
    printf("\n");
}

int main() {
    int choice;

    do {
        printf("\nMenu:\n");
        printf("1. Accept Available\n");
        printf("2. Display Allocation, Max\n");
        printf("3. Display Need Matrix\n");
        printf("4. Display Available\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                acceptAvailable();
                break;
            case 2:
                displayAllocationMax();
                break;
            case 3:
                displayNeed();
                break;
            case 4:
                displayAvailable();
                break;
            case 5:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice!\n");
        }
    } while (choice != 5);

    return 0;
}