Q1
#include <stdio.h>
#define PROCESS_COUNT 5
#define RESOURCE_COUNT 4
int allocation[PROCESS_COUNT][RESOURCE_COUNT] = {
{0, 1, 0},
{2, 0, 0},
{3, 0, 3},
{2, 1, 1},
{0, 0, 2}
};
int max[PROCESS_COUNT][RESOURCE_COUNT] = {
{0, 0, 0},
{2, 0, 2},
{0, 0, 0},
{1, 0, 0},
{0, 0, 2}
};
int available[RESOURCE_COUNT] = {0, 0, 0};
int need[PROCESS_COUNT][RESOURCE_COUNT];
void calculateNeedMatrix() 
{
for (int i = 0; i < PROCESS_COUNT; i++) 
{
for (int j = 0; j < RESOURCE_COUNT; j++) 
{
need[i][j] = max[i][j] - allocation[i][j];
}
}
}
int isSafeState() 
{
int work[RESOURCE_COUNT];
int finish[PROCESS_COUNT] = {0};
int safeSequence[PROCESS_COUNT];
int count = 0;
for (int i = 0; i < RESOURCE_COUNT; i++) 
{
work[i] = available[i];
}
while (count < PROCESS_COUNT) 
{
int found = 0;
for (int i = 0; i < PROCESS_COUNT; i++) 
{
if (finish[i] == 0) 
{
int j;
for (j = 0; j < RESOURCE_COUNT; j++) 
{
if (need[i][j] > work[j])
break;
}
if (j == RESOURCE_COUNT) 
{
for (int k = 0; k < RESOURCE_COUNT; k++) 
{
work[k] += allocation[i][k];
}
safeSequence[count++] = i;
finish[i] = 1;
found = 1;
}
}
}
if (!found) 
{
printf("System is not in a safe state.\n");
return 0;
}
}
printf("System is in a safe state.\nSafe sequence is: ");
for (int i = 0; i < PROCESS_COUNT; i++) 
{
printf("P%d ", safeSequence[i]);
}
printf("\n");
return 1;
}
int main() 
{
calculateNeedMatrix();
printf("Need Matrix:\n");
for (int i = 0; i < PROCESS_COUNT; i++) 
{
for (int j = 0; j < RESOURCE_COUNT; j++) 
{
printf("%d ", need[i][j]);
}
printf("\n");
}
isSafeState();
return 0;
}




Q2
#include <stdio.h>
#include <stdlib.h>
void sortRequests(int requests[], int n) 
{
int temp;
for (int i = 0; i < n - 1; i++) 
{
for (int j = i + 1; j < n; j++) 
{
if (requests[i] > requests[j]) 
{
temp = requests[i];
requests[i] = requests[j];
requests[j] = temp;
}
}
}
}
void scan(int requests[], int n, int head, int diskSize, char direction) 
{
int totalHeadMovements = 0;
int left[100], right[100];
int leftCount = 0, rightCount = 0;
for (int i = 0; i < n; i++) 
{
if (requests[i] < head) 
{
left[leftCount++] = requests[i];
} 
else 
{
right[rightCount++] = requests[i];
}
}
sortRequests(left, leftCount);
sortRequests(right, rightCount);
if (direction == 'R') 
{
totalHeadMovements += (diskSize - 1 - head);
for (int i = 0; i < rightCount; i++) 
{
totalHeadMovements += abs(head - right[i]);
head = right[i];
}
totalHeadMovements += (head - 0);
head = 0;
for (int i = leftCount - 1; i >= 0; i--) 
{
totalHeadMovements += abs(head - left[i]);
head = left[i];
}
}
printf("Requests in the order they are served:");
for (int i = 0; i < rightCount; i++) 
{
printf("%d ", right[i]);
}
for (int i = leftCount - 1; i >= 0; i--) 
{
printf("%d ", left[i]);
}
printf("Total head movements: %d", totalHeadMovements);
}
int main() 
{
int requests[] = {176, 79, 34, 60, 92, 41, 114};
int n = sizeof(requests) / sizeof(requests[0]);
int head, diskSize = 200;
char direction;
printf("Enter the starting head position: ");
scanf("%d", &head);
printf("Enter the direction (R for Right, L for Left): ");
scanf(" %c", &direction);
scan(requests, n, head, diskSize, direction);
return 0;
}