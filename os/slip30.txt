Q1
#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#define ARRAY_SIZE 1000
int main(int argc, char *argv[]) 
{
    int rank, size, i;
    int numbers[ARRAY_SIZE], local_min, global_min;
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    if (rank == 0) 
    {
        srand(time(NULL));
        for (i = 0; i < ARRAY_SIZE; i++) 
        {
            numbers[i] = rand() % 100;
        }
    }
    int chunk_size = ARRAY_SIZE / size;
    int local_numbers[chunk_size];
    MPI_Scatter(numbers, chunk_size, MPI_INT, local_numbers, chunk_size, MPI_INT, 0, MPI_COMM_WORLD);
    local_min = local_numbers[0];
    for (i = 1; i < chunk_size; i++) 
    {
        if (local_numbers[i] < local_min) 
        {
            local_min = local_numbers[i];
        }
    }
    MPI_Reduce(&local_min, &global_min, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);
    if (rank == 0) 
    {
        printf("Minimum number among 1000 numbers: %d\n", global_min);
    }
    MPI_Finalize();
    return 0;
}

Q2

#include <stdio.h>
#include <stdlib.h>
void fcfs(int requests[], int n, int head) 
{
int totalMovement = 0;
printf("Request served in order: ");
for (int i = 0; i < n; i++) 
{
printf("%d ", requests[i]);
totalMovement += abs(requests[i] - head);
head = requests[i];
}
printf("\nTotal head movements: %d\n", totalMovement);
}
int main() 
{
int n, head;
printf("Enter total number of requests: ");
scanf("%d", &n);
int requests[n];
printf("Enter the disk request string: ");
for (int i = 0; i < n; i++) 
{
scanf("%d", &requests[i]);
}
printf("Enter the starting head position: ");
scanf("%d", &head);
fcfs(requests, n, head);
return 0;
}
