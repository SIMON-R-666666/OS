#include <stdio.h>
#include <stdbool.h>

#define PROCESSES 5
#define RESOURCES 3

int allocation[PROCESSES][RESOURCES] = {
    {0, 1, 0},
    {2, 0, 0},
    {3, 0, 3},
    {2, 1, 1},
    {0, 0, 2}
};

int max[PROCESSES][RESOURCES] = {
    {0, 0, 0},
    {2, 0, 2},
    {0, 0, 0},
    {1, 0, 0},
    {0, 0, 2}
};

int available[RESOURCES] = {0, 0, 0};
int need[PROCESSES][RESOURCES];
bool finish[PROCESSES];

void calculateNeed() {
    for (int i = 0; i < PROCESSES; i++) {
        for (int j = 0; j < RESOURCES; j++) {
            need[i][j] = max[i][j] - allocation[i][j];
        }
    }
}

bool isSafe(int safeSequence[]) {
    int work[RESOURCES];
    for (int i = 0; i < RESOURCES; i++) {
        work[i] = available[i];
    }

    for (int i = 0; i < PROCESSES; i++) {
        finish[i] = false;
    }

    int count = 0;
    int safeSeqIndex = 0;
    while (count < PROCESSES) {
        bool found = false;
        for (int p = 0; p < PROCESSES; p++) {
            if (finish[p] == false) {
                int j;
                for (j = 0; j < RESOURCES; j++) {
                    if (need[p][j] > work[j]) {
                        break;
                    }
                }
                if (j == RESOURCES) {
                    for (int k = 0; k < RESOURCES; k++) {
                        work[k] += allocation[p][k];
                    }
                    finish[p] = true;
                    safeSequence[safeSeqIndex++] = p;
                    found = true;
                    count++;
                }
            }
        }
        if (found == false) {
            return false;
        }
    }
    return true;
}

void acceptAvailable() {
    printf("Enter available resources (A B C): ");
    scanf("%d %d %d", &available[0], &available[1], &available[2]);
}

int main() {
    acceptAvailable(); 
    calculateNeed();

    printf("Need Matrix:\n");
    printf("    A B C\n");
    for (int i = 0; i < PROCESSES; i++) {
        printf("P%d:  %d %d %d\n", i, need[i][0], need[i][1], need[i][2]);
    }

    int safeSequence[PROCESSES];
    if (isSafe(safeSequence)) {
        printf("\nThe system is in a safe state.\n");
        printf("Safe sequence: ");
        for (int i = 0; i < PROCESSES; i++) {
            printf("P%d ", safeSequence[i]);
        }
        printf("\n");
    } else {
        printf("\nThe system is in an unsafe state.\n");
    }

    return 0;
}