Q1
#include <stdio.h>
#define PROCESS_COUNT 5
#define RESOURCE_COUNT 4
int allocation[PROCESS_COUNT][RESOURCE_COUNT] = {
{0, 0, 1, 2},
{1, 0, 0, 0},
{1, 3, 5, 4},
{0, 6, 3, 2},
{0, 0, 1, 4}
};
int max[PROCESS_COUNT][RESOURCE_COUNT] = {
{0, 0, 1, 2},
{1, 7, 5, 0},
{2, 3, 5, 6},
{0, 6, 5, 2},
{0, 6, 5, 6}
};
int available[RESOURCE_COUNT] = {1, 5, 2, 0};
int need[PROCESS_COUNT][RESOURCE_COUNT];
void calculateNeedMatrix() 
{
for (int i = 0; i < PROCESS_COUNT; i++) 
{
for (int j = 0; j < RESOURCE_COUNT; j++) 
{
need[i][j] = max[i][j] - allocation[i][j];
}
}
}
int isSafeState() 
{
int work[RESOURCE_COUNT];
int finish[PROCESS_COUNT] = {0};
int safeSequence[PROCESS_COUNT];
int count = 0;
for (int i = 0; i < RESOURCE_COUNT; i++) 
{
work[i] = available[i];
}
while (count < PROCESS_COUNT) 
{
int found = 0;
for (int i = 0; i < PROCESS_COUNT; i++) 
{
if (finish[i] == 0) 
{
int j;
for (j = 0; j < RESOURCE_COUNT; j++) 
{
if (need[i][j] > work[j])
break;
}
if (j == RESOURCE_COUNT) 
{
for (int k = 0; k < RESOURCE_COUNT; k++) 
{
work[k] += allocation[i][k];
}
safeSequence[count++] = i;
finish[i] = 1;
found = 1;
}
}
}
if (!found) 
{
printf("System is not in a safe state.\n");
return 0;
}
}
printf("System is in a safe state.\nSafe sequence is: ");
for (int i = 0; i < PROCESS_COUNT; i++) 
{
printf("P%d ", safeSequence[i]);
}
printf("\n");
return 1;
}
int main() 
{
calculateNeedMatrix();
printf("Need Matrix:\n");
for (int i = 0; i < PROCESS_COUNT; i++) 
{
for (int j = 0; j < RESOURCE_COUNT; j++) 
{
printf("%d ", need[i][j]);
}
printf("\n");
}
isSafeState();
return 0;
}



Q2
#include <stdio.h>
#include <stdlib.h>
void fcfs(int requests[], int n, int head) 
{
int totalMovement = 0;
printf("Request served in order: ");
for (int i = 0; i < n; i++) 
{
printf("%d ", requests[i]);
totalMovement += abs(requests[i] - head);
head = requests[i];
}
printf("\nTotal head movements: %d\n", totalMovement);
}
int main() 
{
int n, head;
printf("Enter total number of requests: ");
scanf("%d", &n);
int requests[n];
printf("Enter the disk request string: ");
for (int i = 0; i < n; i++) 
{
scanf("%d", &requests[i]);
}
printf("Enter the starting head position: ");
scanf("%d", &head);
fcfs(requests, n, head);
return 0;
}
