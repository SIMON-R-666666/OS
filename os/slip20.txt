Q1
#include <stdio.h>
#include <stdlib.h>
void sort(int arr[], int n) 
{
int temp;
for (int i = 0; i < n - 1; i++) 
{
for (int j = 0; j < n - i - 1; j++) 
{
if (arr[j] > arr[j + 1]) {
temp = arr[j];
arr[j] = arr[j + 1];
arr[j + 1] = temp;
}
}
}
}
void scan(int requests[], int n, int head, int direction, int disk_size) 
{
int total_movement = 0;
int current = head;
sort(requests, n);
int index;
for (index = 0; index < n; index++) 
{
if (requests[index] > head) 
{
break;
}
}
printf("Order of servicing requests: ");
if (direction == 0) 
{ 
for (int i = index - 1; i >= 0; i--) 
{
printf("%d ", requests[i]);
total_movement += abs(current - requests[i]);
current = requests[i];
}
total_movement += current;
current = 0;
for (int i = index; i < n; i++) 
{
printf("%d ", requests[i]);
total_movement += abs(current - requests[i]);
current = requests[i];
}
} 
else 
{
for (int i = index; i < n; i++) 
{
printf("%d ", requests[i]);
total_movement += abs(current - requests[i]);
current = requests[i];
}
total_movement += abs(disk_size - 1 - current);
current = disk_size - 1;
for (int i = index - 1; i >= 0; i--) {
printf("%d ", requests[i]);
total_movement += abs(current - requests[i]);
current = requests[i];
}
}
printf("\nTotal head movement: %d\n", total_movement);
}
int main() 
{
int n, head, direction, disk_size;
printf("Enter total number of disk blocks: ");
scanf("%d", &disk_size);
printf("Enter number of requests: ");
scanf("%d", &n);
int requests[n];
printf("Enter the request string: ");
for (int i = 0; i < n; i++) 
{
scanf("%d", &requests[i]);
}
printf("Enter starting head position: ");
scanf("%d", &head);
printf("Enter direction (0 for Left, 1 for Right): ");
scanf("%d", &direction);
scan(requests, n, head, direction, disk_size);
return 0;
}

Q2
#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#define ARRAY_SIZE 1000
int main(int argc, char *argv[]) 
{
    int rank, size, i;
    int numbers[ARRAY_SIZE], local_max, global_max;
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    if (rank == 0) 
    {
        srand(time(NULL));
        for (i = 0; i < ARRAY_SIZE; i++) 
        {
            numbers[i] = rand() % 100;
        }
    }
    int chunk_size = ARRAY_SIZE / size;
    int local_numbers[chunk_size];
    MPI_Scatter(numbers, chunk_size, MPI_INT, local_numbers, chunk_size, MPI_INT, 0, MPI_COMM_WORLD);
    local_max = local_numbers[0];
    for (i = 1; i < chunk_size; i++) 
    {
        if (local_numbers[i] > local_max) 
        {
            local_max = local_numbers[i];
        }
    }
    MPI_Reduce(&local_max, &global_max, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);
    if (rank == 0) 
    {
        printf("Maximum number among 1000 numbers: %d\n", global_max);
    }
    MPI_Finalize();
    return 0;
}
