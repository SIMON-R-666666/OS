#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>

#define SIZE 1000  

int main(int argc, char *argv[]) {
    int rank, size;
    int local_min, global_min;
    int numbers_per_process;
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    numbers_per_process = SIZE / size;
    srand(rank + 1);
    int *local_numbers = (int *)malloc(numbers_per_process * sizeof(int));
    local_min = 101; 
    for (int i = 0; i < numbers_per_process; i++) {
        local_numbers[i] = rand() % 100;  
        if (local_numbers[i] < local_min) {
            local_min = local_numbers[i];
        }
    }
    MPI_Reduce(&local_min, &global_min, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);
    if (rank == 0) {
        printf("Global Minimum = %d\n", global_min);
    }
        free(local_numbers);
    MPI_Finalize();
    
    return 0;
}
