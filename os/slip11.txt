Q1
#include <stdio.h>
#define PROCESS_COUNT 5
#define RESOURCE_COUNT 3
int allocation[PROCESS_COUNT][RESOURCE_COUNT] = {
{0, 1, 0},
{2, 0, 0},
{3, 0, 3},
{2, 1, 1},
{0, 0, 2}
};
int max[PROCESS_COUNT][RESOURCE_COUNT] = {
{0, 0, 0},
{2, 0, 2},
{0, 0, 0},
{1, 0, 0},
{0, 0, 2}
};
int available[RESOURCE_COUNT] = {0, 0, 0};
int need[PROCESS_COUNT][RESOURCE_COUNT];
void calculateNeedMatrix() 
{
for (int i = 0; i < PROCESS_COUNT; i++) 
{
for (int j = 0; j < RESOURCE_COUNT; j++) 
{
need[i][j] = max[i][j] - allocation[i][j];
}
}
}
void displayMatrix(int matrix[PROCESS_COUNT][RESOURCE_COUNT], char *name) 
{
printf("%s Matrix:\n", name);
for (int i = 0; i < PROCESS_COUNT; i++) 
{
for (int j = 0; j < RESOURCE_COUNT; j++) 
{
printf("%d ", matrix[i][j]);
}
printf("\n");
}
}
void displayAvailable() 
{
printf("Available Resources:\n");
for (int i = 0; i < RESOURCE_COUNT; i++) 
{
printf("%d ", available[i]);
}
printf("\n");
}
int main() 
{
int choice;
while (1) 
{
printf("\nMenu:\n");
printf("1. Accept Available Resources\n");
printf("2. Display Allocation and Max\n");
printf("3. Find and Display Need\n");
printf("4. Display Available Resources\n");
printf("5. Exit\n");
printf("Enter your choice: ");
scanf("%d", &choice);
switch (choice) 
{
case 1:
printf("Enter available resources for A, B, and C: ");
for (int i = 0; i < RESOURCE_COUNT; i++) 
{
scanf("%d", &available[i]);
}
break;
case 2:
displayMatrix(allocation, "Allocation");
displayMatrix(max, "Max");
break;
case 3:
calculateNeedMatrix();
displayMatrix(need, "Need");
break;
case 4:
displayAvailable();
break;
case 5:
return 0;
default:
printf("Invalid choice!\n");
}
}
return 0;
}


Q2
#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#define ARRAY_SIZE 1000

int main(int argc, char *argv[]) 
{
    int rank, size, i;
    int numbers[ARRAY_SIZE], local_min, global_min;
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    if (rank == 0) 
    {
        srand(time(NULL));
        for (i = 0; i < ARRAY_SIZE; i++) 
        {
            numbers[i] = rand() % 100;
        }
    }
    int chunk_size = ARRAY_SIZE / size;
    int local_numbers[chunk_size];
    MPI_Scatter(numbers, chunk_size, MPI_INT, local_numbers, chunk_size, MPI_INT, 0, MPI_COMM_WORLD);
    local_min = local_numbers[0];
    for (i = 1; i < chunk_size; i++) 
    {
        if (local_numbers[i] < local_min) 
        {
            local_min = local_numbers[i];
        }
    }
    MPI_Reduce(&local_min, &global_min, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);
    if (rank == 0) 
    {
        printf("Minimum number among 1000 numbers: %d\n", global_min);
    }
    MPI_Finalize();
    return 0;
}